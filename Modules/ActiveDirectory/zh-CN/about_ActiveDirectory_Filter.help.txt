主题
    Active Directory 筛选器

简短说明
    说明 Windows PowerShell 的 Active Directory 模块所支持的搜索筛选器的语法和
    行为。

详细说明
    大多数 get-AD* Active Directory 模块 cmdlet 都使用 Filter 参数来搜索对象
    。实现 Filter 参数是为了替代 LDAP 筛选器的功能，通过该参数可以支持 PowerShell
    变量、丰富数据类型、改进的错误检查功能以及 PowerShell 表达式语言的 Active Directory
    扩展格式。

    有关 Windows PowerShell 表达式语言语法的详细信息，请参阅 about_filter。

    注意：about_filter PowerShell 主题引用了其他表达式语言支持主题。

  对 LDAP 筛选器语法的支持
    通过 LDAPFilter 参数可以支持 LDAP 筛选器语法。本主题的"筛选器示例"一节中提供了 LDAP
    筛选器示例以及新的 Active Directory 模块筛选器示例。

  搜索广度和深度
    通过 SearchBase 和 SearchScope 这两个 Active Directory 模块 cmdlet 参
    数，可以修改筛选器驱动的搜索的广度和深度。

    在 Active Directory 提供程序的上下文中，如果未指定 Searchbase 参数，则 SearchBase
    默认为当前路径。如果不在 Active Directory 提供程序之下运行，则 SearchBase
    默认为服务器的 DefaultNamingContext。

    SearchScope 参数默认为枚举类型 ADSearchScope 的值 Subtree。

    有关详细信息，请参阅任一 Get-AD* cmdlet 中对 SearchBase 和 SearchScope 参
    数的描述。

  搜索结果行为
    通过 ResultPageSize 和 ResultSetSize 这两个 cmdlet 参数，可以修改 Active
    Directory 模块在返回搜索结果时的行为。

    ResultSetSize 控制返回的对象的最大数目。

    ResultPageSize 指定返回的每个信息页中包含的最大对象数。

    有关详细信息，请参阅任一 get-AD* cmdlet 中对 ResultPageSize 和 ResultSetSize
    参数的描述。

  超时行为
    以下陈述指定 Active Directory 模块中的超时条件，并说明可以对超时条件执行的操作。

    所有操作的默认 Active Directory 模块超时都是 2 分钟。

    对于搜索操作，Active Directory 模块使用每页搜索超时为 2 分钟的分页控制。

    注意：因为一次搜索可能涉及多个服务器页请求，所以总体搜索时间可能会超过 2 两分钟。

    TimeoutException 错误指示已发生超时。

    对于搜索操作，如果遇到 TimeoutException 错误，则可以选择使用较小的页大小
   （通过 ResultPageSize 参数进行设置）。

    如果在尝试进行这些更改之后仍然遇到 TimeoutException 错误，请考虑按照本主题的“优
    化筛选器”一节中的准则来优化筛选器。

  优化筛选器
    可以使用以下准则增强搜索筛选器行为。

    避免使用 Recursive 参数，因为该参数会增加搜索操作的资源使用量。

    避免使用位与运算符和位或运算符。有关详细信息，请参阅本主题的"支持的运算符"一节。

    避免使用逻辑非运算符。

    使用范围更小的条件将搜索细分为多个查询。

    注意：有关筛选器语法和用法的完整说明，请参阅本主题的“筛选器语法”一节。

  筛选器示例
    下面一节将演示很多常见查询中的筛选器用法示例。

    -------------------------- 示例 1 --------------------------

    获取所有条目：

        LDAP 筛选器等效项
        (objectClass=*)

        Get-ADObject -Filter 'ObjectClass -like "*"'

    -------------------------- 示例 2 --------------------------

    获取公用名中包含"bob"的条目：

        LDAP 筛选器等效项
        (cn=*bob*)

        Get-ADObject -Filter 'CN -like "*bob*"'

    -------------------------- 示例 3 --------------------------

    获取错误密码计数大于五的条目：

        LDAP 筛选器等效项
        (badpwdcount>=5)

        Get-ADUser -Filter 'badpwdcount -ge 5'

    -------------------------- 示例 4 --------------------------

    获取具有电子邮件属性的所有用户：

        LDAP 筛选器等效项
        (&(objectClass=user)(email=*))

        Get-ADUser -filter 'email -like "*"'

        - 或 -

        Get-ADObject -filter 'email -like "*" -and ObjectClass -eq "
        user"'

    -------------------------- 示例 5 --------------------------

    获取具有电子邮件属性且姓氏等于"smith"的所有用户条目：

        LDAP 筛选器等效项
        (&(sn=smith)(objectClass=user)(email=*))

        Get-ADUser -Filter 'Email -like "*" -and SurName -eq "smith"'

        - 或 -

        Get-ADUser -Filter 'Email -like "*" -and sn -eq "smith"'

    -------------------------- 示例 6 --------------------------

    获取公用名以“andy”开头和公用名为“steve”或“margaret”的所有用户条目：

        LDAP 筛选器等效项
        (&(objectClass=user) | (cn=andy*)(cn=steve)(cn=margaret))

        Get-ADUser -Filter 'CN -like "andy*" -or CN -eq "steve" -or
        CN -eq "margaret"'

    示例中的这第二个 PowerShell 脚本演示了更加复杂的逻辑以及通过括号控制优先级的方法。

        Get-ADObject -Filter 'objectClass -eq "user" -and
         (CN -like "andy*" -or CN -eq "steve" -or CN -eq "margaret")'

    -------------------------- 示例 7 --------------------------

    获取没有电子邮件属性的所有条目：

        LDAP 筛选器等效项
        (!(email=*))

        Get-ADUser -Filter '-not Email -like "*"'

        - 或 -

        Get-ADUser -Filter 'Email -notlike "*"'

    -------------------------- 示例 8 --------------------------

    获取自从 2007 年 1 月 1 日以来一直未登录的所有用户：

        LDAP 筛选器等效项
        (&(lastlogon<=X)(objectClass=user))
        //其中 X 是自 1601 年 1 月 1 日以来的 100 纳秒片段的数目

        $date = new-object System.DateTime -ArgumentList @(2007,1,
        1,0,0,0)
        Get-ADUser -Filter '-not LastLogon -le $date'

    -------------------------- 示例 9 --------------------------

    获取在最近 5 天内登录过的所有用户：

        LDAP 筛选器等效项
        (&(lastLogon>=128812906535515110)
          (objectClass=user)(!(objectClass=computer)))

        $date = (get-date) - (new-timespan -days 5)
        Get-ADUser -Filter 'lastLogon -gt $date'

    -------------------------- 示例 10 --------------------------

    下面的示例查询字符串搜索设置了 ADS_GROUP_TYPE_SECURITY_ENABLED 标志的组
    对象。注意，是将 ADS_GROUP_TYPE_SECURITY_ENABLED 的十进制值 (0x80000000
    = 2147483648) 用于比较值。

        LDAP 筛选器等效项
        (&(objectCategory=group)(groupType:1.2.840.113556.1.4.803:=
        2147483648))

        Get-ADGroup -filter 'groupType -band 0x80000000'

    -------------------------- 示例 11 --------------------------

    LDAP_MATCHING_RULE_IN_CHAIN 是匹配规则 OID，用于提供一种方法来查找对象的体系。
    许多使用 Active Directory 和 AD LDS 的应用程序通常处理通过父子关系进行
    排序的分层数据。以前，应用程序执行可传递的组扩展来确定成员身份，这会使用过多的网
    络带宽。如果某个链接遍历到末尾，则应用程序需要进行多次往返才能确定对象是否处于
    “链中”。

    用于检查用户“user1”是否为组“group1”的成员的查询就是这类查询。

    注意：user1 可能不是 group1 的直接成员。它可能是作为 group1 的成员的另一个组的成
    员。

    可将基设置为用户 DN（cn=user1，cn=users，dc=x）并将作用域设置为基，然后使用下面
    的查询：

        LDAP 筛选器等效项
        (memberof:1.2.840.113556.1.4.1941:=(cn=Group1,OU=groupsOU,
        DC=x)))

        Get-ADUser -Filter 'memberOf -RecursiveMatch "CN=
        Administrators,
        CN=Builtin,DC=Fabrikam,DC=com"'
        -SearchBase "CN=Administrator,CN=Users,DC=Fabrikam,DC=com"

    ---------------------------------------------------------------

  筛选器语法
    以下语法描述采用巴科斯-诺尔范式说明如何对 Filter 参数使用 PowerShell 表达式语言。

        <filter>  ::= "{" <FilterComponentList> "}"

        <FilterComponentList> ::= <FilterComponent> |
          <FilterComponent> <JoinOperator> <FilterComponent> |
          <NotOperator>  <FilterComponent>

        <FilterComponent> ::= <attr> <FilterOperator> <value> |
          "(" <FilterComponent> ")"

        <FilterOperator> ::= "-eq" | "-le" | "-ge" | "-ne" | "-
        lt" | "-gt" |
          "-approx" | "-bor" | "-band" | "-recursivematch" | "-like" |
          "-notlike"

        <JoinOperator> ::= "-and" | "-or"

        <NotOperator> ::= "-not"

        <attr> ::= <PropertyName> | <LDAPDisplayName of the attribute>

        <value>::= < this value will be compared to the object data
        for attribute <ATTR> using the specified filter operator
        

    有关支持的属性名称及其类型的列表，请参阅 get-help about_ActiveDirectory_ObjectModel
    。

  支持的运算符
    下表列出了常用的搜索筛选器运算符。

                                                    
    运算符              说明                               LDAP 等效项
    --------------- ------------------------------ ---------------------
    
    -eq                等于。不支持通配符搜索。            =
    -ne                不等于。不支持通配符搜索。          !x = y
    -approx            约等于                              ~=
    -le                按字典顺序小于或等于                <=
    -lt                按字典顺序小于                      !x >= y
    -ge                按字典顺序大于或等于                >=
    -gt                按字典顺序大于                      !x <= y

    -and               与                                  &
    -or                或                                  |
    -not               非                                  !
    -bor               位或                                :1.2.840.113556.1.4.804:=
    -band              位与                                :1.2.840.113556.1.4.803:=
    -recursivematch    使用 LDAP_MATCHING_RULE_IN_CHAIN    :1.2.840.113556.1.4.1941:=
                      （注意：此控制项只适用于 Windows
                       2008 及更高版本。）
    -like              类似于 -eq，支持通配符比较。        =
                       唯一支持的通配符是：*
    -notlike           不相似。支持通配符比较。            !x = y

    注意：-Filter 参数语法不支持“*”之外的PowerShell 通配符（如“?”）。

  运算符优先级
    下面的列表从最高到最低列出了筛选器运算符的优先级。

    最高优先级：-eq | -ge | -le | -approx | -band | -bor |
                -recursivematch | -ne | -like
                -not
                -and
    最低优先级：-or

  特殊字符
    在指定 AD 筛选器字符串数据（即包含在 " "（双引号）或 ' '（单引号）中的数据）中的特
    殊字符时，应使用下面的转义序列。

    ASCII 字符            转义序列替代项
    ------------------- ------------------------------------------------
    
    "                   `"（仅当字符串数据包含在双引号中时，才需要此转义序列。）
    '                   ''（仅当字符串数据包含在单引号中时，才需要此转义序列。）
    NUL                 \00（这是标准 LDAP 转义序列。）
    \                   \5c（这是标准 LDAP 转义序列。）

  LDAP 特殊字符
    ADFilter 分析程序自动将在字符串数据（即包含在 " " 或 ' ' 中的数据）中找到的以下所
    有字符转换为相应的 LDAP 转义序列。最终用户无需了解这些 LDAP 转义序列。

    ASCII 字符            转义序列替代项
    ------------------- ------------------------------------------------
    
    *                    \2a（只有在 -eq 和 -ne 比较中才会转换字符 *；进行通配
                              符比较时，用户应使用 -like 和 -notlike 运算符。）
    (                    \28
    )                    \29
    /                    \2f

  其他 Active Directory 模块支持主题
    有关优化筛选器的详细信息，请参阅 MSDN Library 中的“创建更高效的支持 Microsoft Active
    Directory 的应用程序”。

    有关 Active Directory 模块对象及其属性的详细信息，请参阅 about_ActiveDirectory_ObjectModel。
    

    有关 Windows PowerShell 表达式语言语法的详细信息，请参阅 about_filter。

    注意：about_filter PowerShell 主题引用了其他表达式语言支持主题。

另请参阅
    about_ActiveDirectory
    about_ActiveDirectory_ObjectModel
    about_filter

