主題
    Active Directory 篩選

簡短描述
    描述 Windows PowerShell 的 Active Directory 模組所支援之搜尋篩選的語法和行
    為。

完整描述
    大部分 get-AD* Active Directory 模組 Cmdlet 都使用 Filter 參數來搜尋物件
    ，Filter 參數已經過實作而取代了 LDAP 篩選的功能，並新增對 PowerShell 變數
    的支援、支援更多資料型別、改善錯誤檢查，以及新增 PowerShell 運算式語言的
    Active Directory 延伸格式。

    如需 Windows PowerShell 運算式語言語法的詳細資訊，請參閱 about_filter。

    注意：about_filter PowerShell 主題參考更多支援的運算式語言主題。

  LDAP 篩選語法的支援
    透過 LDAPFilter 參數，即可支援 LDAP 篩選語法。您可在本主題的＜篩選範例＞一
    節中，找到 LDAP 篩選範例以及新的 Active Directory 模組篩選範例。

  搜尋的寬度與深度
    篩選式搜尋的寬度與深度可以利用下列兩個 Active Directory 模組 Cmdlet 參數加
    以修改：SearchBase 和 SearchScope。

    在 Active Directory 提供者的內容範圍內時，如果未指定 Searchbase 參數，
    SearchBase 會預設為目前的路徑。不在 Active Directory 提供者的範圍內執
    行時，SearchBase 會預設為伺服器的 DefaultNamingContext。

    SearchScope 參數預設為列舉型別為 ADSearchScope 的 Subtree 值。

    如需詳細資訊，請參閱任何 Get-AD* Cmdlet 的 SearchBase 和 SearchScope 參數
    描述。

  搜尋結果行為
    傳回搜尋結果時的 Active Directory 模組行為，可以利用下列兩個 Cmdlet 參數加
    以修改：ResultPageSize 和 ResultSetSize。

    ResultSetSize 會控制傳回的物件上限。

    ResultPageSize 會指定每一個傳回資訊頁面的物件上限。

    如需詳細資訊，請參閱任何 get-AD* Cmdlet 的 ResultPageSize 和 ResultSetSize
    參數描述。

  逾時行為
    下列說明指定 Active Directory 模組內的逾時條件，並說明如何處理逾時情形。

    所有作業的預設 Active Directory 模組逾時都是 2 分鐘。

    針對搜尋作業，Active Directory 模組會為每個頁面搜尋使用有 2 分鐘逾時的分頁
    控制。

    注意：由於搜尋作業可能涉及多個伺服器頁面要求，整體搜尋時間可能會超過 2 分
          鐘。

    TimeoutException 錯誤表示發生逾時。

    針對搜尋作業，如果發生 TimeoutException 錯誤，您可以選擇使用以 
    ResultPageSize 參數設定的較小頁面大小。

    如果嘗試過上述變更仍然發生 TimeoutException 錯誤，請考慮根據本主題中＜最佳
    化篩選＞一節的指引，最佳化您的篩選。

  最佳化篩選
    您可利用下列指導方針，增進搜尋篩選行為。

    避免使用 Recursive 參數，因為會增加搜尋作業的資源使用量。

    避免使用位元 AND 運算子和位元 OR 運算子。如需詳細資訊，請參閱本主題中的
    ＜支援的運算子＞一節。

    避免使用邏輯 NOT 運算子。

    將搜尋分成條件較限縮的數個查詢。

    注意：如需篩選語法和用法的完整描述，請參閱本主題的＜篩選語法＞一節。

  篩選範例
    下一節將示範常見查詢中許多篩選用法的範例。

    -------------------------- 範例 1 --------------------------

    取得所有項目：

        對應的 LDAP 篩選條件
        (objectClass=*)

        Get-ADObject -Filter 'ObjectClass -like "*"'

    -------------------------- 範例 2 --------------------------

    取得一般名稱中含有 "bob" 的項目：

        對應的 LDAP 篩選條件
        (cn=*bob*)

        Get-ADObject -Filter 'CN -like "*bob*"'

    -------------------------- 範例 3 --------------------------

    取得錯誤密碼計數大於五的項目：

        對應的 LDAP 篩選條件
        (badpwdcount>=5)

        Get-ADUser -Filter 'badpwdcount -ge 5'

    -------------------------- 範例 4 --------------------------

    取得具有電子郵件屬性的所有使用者：

        對應的 LDAP 篩選條件
        (&(objectClass=user)(email=*))

        Get-ADUser -filter 'email -like "*"'

        -或-

        Get-ADObject -filter 'email -like "*" -and ObjectClass -eq "user"'
        

    -------------------------- 範例 5 --------------------------

    取得具有電子郵件屬性且姓氏為 "smith" 的所有使用者項目：

        對應的 LDAP 篩選條件
        (&(sn=smith)(objectClass=user)(email=*))

        Get-ADUser -Filter 'Email -like "*" -and SurName -eq "smith"'

        -或-

        Get-ADUser -Filter 'Email -like "*" -and sn -eq "smith"'

    -------------------------- 範例 6 --------------------------

    取得一般名稱開頭為 "andy" 且使用者一般名稱為 "steve" 或 "margaret" 的所有
    使用者項目。

        對應的 LDAP 篩選條件
        (&(objectClass=user) | (cn=andy*)(cn=steve)(cn=margaret))

        Get-ADUser -Filter 'CN -like "andy*" -or CN -eq "steve" -or
        CN -eq "margaret"'

    在範例的第二個 PowerShell 指令碼中，將示範更複雜的邏輯以及使用括號控制優先
    順序的用法。

        Get-ADObject -Filter 'objectClass -eq "user" -and
         (CN -like "andy*" -or CN -eq "steve" -or CN -eq "margaret")'

    -------------------------- 範例 7 --------------------------

    取得所有不具有電子郵件屬性的使用者：

        對應的 LDAP 篩選條件
        (!(email=*))

        Get-ADUser -Filter '-not Email -like "*"'

        -或-

        Get-ADUser -Filter 'Email -notlike "*"'

    -------------------------- 範例 8 --------------------------

    取得自 2007 年 1 月 1 日以來未曾登入的所有使用者：

        對應的 LDAP 篩選條件
        (&(lastlogon<=X)(objectClass=user))
        //其中 X 是自 1601 年 1 月 1 日以來的 100 個十億分之一秒片段數

        $date = new-object System.DateTime -ArgumentList @(2007,1,1,0,0,0)
        
        Get-ADUser -Filter '-not LastLogon -le $date'

    -------------------------- 範例 9 --------------------------

    取得過去 5 天以來曾經登入的所有使用者：

        對應的 LDAP 篩選條件
        (&(lastLogon>=128812906535515110)
          (objectClass=user)(!(objectClass=computer)))

        $date = (get-date) - (new-timespan -days 5)
        Get-ADUser -Filter 'lastLogon -gt $date'

    -------------------------- 範例 10 -------------------------

    下列範例查詢字串會搜尋有 ADS_GROUP_TYPE_SECURITY_ENABLED 旗標集的群組物件。
    請注意，ADS_GROUP_TYPE_SECURITY_ENABLED 的十進位值 (0x80000000 = 2147483648)
    是用於比較值。

        對應的 LDAP 篩選條件
        (&(objectCategory=group)(groupType:1.2.840.113556.1.4.803:=2147483648))
        

        Get-ADGroup -filter 'groupType -band 0x80000000'

    -------------------------- 範例 11 -------------------------

    LDAP_MATCHING_RULE_IN_CHAIN 是一種 OID 比對規則，專門用來提供查閱物件世系的
    方法。許多使用 Active Directory 和 AD LDS 的應用程式通常都會使用排序方式
    為父子關聯性的階層式資料。應用程式以前是執行移轉群組擴充來找出群組成員資
    格，但是佔用太多網路頻寬。如果連結周遊結束，應用程式需執行多個來回行程，
    以了解物件是否落在「鏈結中」。

    這種查詢的範例是一個專門用來檢查 "user1" 使用者是否為 "group1" 群組成員的
    查詢。

    注意：user1 可能不是 group1 的直屬成員，有可能是屬於 group1 之其他群組的成
    員。

    您可以將基底設為使用者 DN (cn=user1、cn=users、dc=x)，並將範圍設為基底，然
    後使用查詢：

        對應的 LDAP 篩選條件
        (memberof:1.2.840.113556.1.4.1941:=(cn=Group1,OU=groupsOU,DC=x)))
        

        Get-ADUser -Filter 'memberOf -RecursiveMatch "CN=Administrators,
        
        CN=Builtin,DC=Fabrikam,DC=com"'
        -SearchBase "CN=Administrator,CN=Users,DC=Fabrikam,DC=com"

    ---------------------------------------------------------------

  篩選語法
    下列語法描述採用巴克斯格式，示範 Filter 參數的 PowerShell 運算式語言。

        <filter>  ::= "{" <FilterComponentList> "}"

        <FilterComponentList> ::= <FilterComponent> |
          <FilterComponent> <JoinOperator> <FilterComponent> |
          <NotOperator>  <FilterComponent>

        <FilterComponent> ::= <attr> <FilterOperator> <value> |
          "(" <FilterComponent> ")"

        <FilterOperator> ::= "-eq" | "-le" | "-ge" | "-ne" | "-lt" | "-gt"
        |
          "-approx" | "-bor" | "-band" | "-recursivematch" | "-like" |
          "-notlike"

        <JoinOperator> ::= "-and" | "-or"

        <NotOperator> ::= "-not"

        <attr> ::= <PropertyName> | <屬性的 LDAPDisplayName>

        <value>::= < 這個值將使用指定的篩選運算子與 <ATTR> 屬性的物件資料進行
        比較

    如需支援的屬性名稱及其型別的清單，請參閱
    get-help about_ActiveDirectory_ObjectModel。

  支援的運算子
    下表列出常用的搜尋篩選運算子。

                                                    
    運算子          描述                             LDAP 對應項
    --------------- ------------------------         ---------------------
     
    -eq              等於。這不會支援萬用字元搜尋。  =
    -ne              不等於。這不會支援萬用字元搜尋。!x = y
    -approx          約等於                          ~=
    -le              按字典順序小於或等於            <=
    -lt              按字典順序小於	             !x >= y
    -ge		     按字典順序大於或等於            >=
    -gt		     按字典順序大於	             !x <= y

    -and	     AND                             &
    -or              OR	                             |
    -not             NOT                     	     !
    -bor             位元運算 OR         	     :1.2.840.113556.1.4.804:=
    -band            位元運算 AND	             :1.2.840.113556.1.4.803:=
    -recursivematch  使用 LDAP_MATCHING_RULE_IN_CHAIN:1.2.840.113556.1.4.1941:=
                     (注意：此控制項只適用於 
                      Windows 2008 (含) 以後版本)。
    -like            與 -eq 相似，並支援萬用字元比較。=
                     唯一支援的萬用字元為：*=
    -notlike         不相似。支援萬用字元比較。       !x = y

    注意：-Filter 參數語法不支援 "*" 以外的 PowerShell 萬用字元 (如 "?")。

  運算子優先順序
    下列清單列出篩選運算子從最高到最低的優先順序。

    Highest precedence: -eq | -ge | -le | -approx | -band | -bor | 
                          -recursivematch | -ne | -like
                        -not
                        -and
    最低的優先順序：-or

  特殊字元
    下列逸出序列應該用來指定 AD 篩選字串資料，亦即放在 " " (雙引號) 或 ' ' 
    (單引號) 內的資料。

    ASCII               字元逸出序列替代項
    ------------------- ------------------------------------------
    "                   `" (只有當字串資料是放在雙引號內時，
                            才需要這個逸出序列)。
    '                   '' (只有當字串資料是放在單引號內時，
                            才需要這個逸出序列)。
    NUL                 \00 (這是標準的 LDAP 逸出序列)。
    \                   \5c (這是標準的 LDAP 逸出序列)。

  LDAP 特殊字元
    ADFilter 剖析器會自動將所有在字串資料中找到的下列字元 (亦即放在 " " 或 
    ' ' 內的資料) 轉換成其 LDAP 逸出序列。使用者不必了解這些 LDAP 逸出序列
    的相關資訊。

    ASCII               字元逸出序列替代項
    ------------------- ------------------------------------------
    *                    \2a (只會轉換 -eq 和 -ne 比較中的 * 
                              字元。使用者應該使用 -like 和
                              -notlike 運算子進行萬用字元比
                              較)。
    (                    \28
    )                    \29
    /                    \2f

  其他 Active Directory 模組支援主題
    如需最佳化篩選的詳細資訊，請參閱 MSDN Library 中的＜建立更有效且已啟用
    Microsoft Active Directory 的應用程式＞(英文)。

    如需 Active Directory 模組物件及其屬性的詳細資訊，請參閱 
    about_ActiveDirectory_ObjectModel。
    

    如需 Windows PowerShell 運算式語言語法的詳細資訊，請參閱 about_filter。

    注意：about_filter PowerShell 主題參考更多支援的運算式語言主題。

請參閱
    about_ActiveDirectory
    about_ActiveDirectory_ObjectModel
    about_filter

