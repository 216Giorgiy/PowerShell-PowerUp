トピック
    Active Directory フィルター

簡易説明
    Windows PowerShell の Active Directory モジュールでサポートされている検索
    フィルターの構文と動作について説明します。

詳細説明
    ほとんどの get-AD* Active Directory モジュール コマンドレットでは、
    オブジェクトを検索するために、Filter パラメーターを使用します。Filter 
    パラメーターは、LDAP フィルターの関数を置き換えるために実装されました。
    Filter パラメーターにより、PowerShell 変数、豊富なデータ型、改善された
    エラー チェック、および PowerShell 記述言語の Active Directory 拡張形式が
    サポートされます。

    Windows PowerShell 記述言語の構文の詳細については、「about_filter」を参照
    してください。

    注: PowerShell の「about_filter」トピックでは、記述言語のサポートに関する
    さまざまなトピックを扱っています。


  LDAP フィルター構文のサポート
    LDAP フィルター構文は、LDAPFilter パラメーターによってサポートされていま
    す。LDAP フィルターの例および Active Directory モジュールの新しいフィルター
    の例については、このトピックの「フィルターの例」を参照してください。

  検索の幅と深さ
    フィルターによる検索の幅と深さは、SearchBase と SearchScope という 2 つの 
    Active Directory モジュール コマンドレット パラメーターで変更できます。

    Active Directory プロバイダーのコンテキスト内で Searchbase パラメーターを
    指定しない場合、既定で SearchBase は現在のパスになります。Active Directory
    プロバイダー内で実行しない場合、既定で SearchBase はサーバーの 
    DefaultNamingContext になります。
    

    既定で、SearchScope パラメーターは列挙型 ADSearchScope の値 Subtree になり
    ます。

    詳細については、Get-AD* コマンドレットの SearchBase および SearchScope 
    パラメーターの説明を参照してください。

  検索結果の動作
    検索結果を返す際の Active Directory モジュールの動作は、ResultPageSize と 
    ResultSetSize の 2 つのコマンドレット パラメーターで変更します。

    ResultSetSize コントロールでは、返すオブジェクトの最大数を指定します。

    ResultPageSize では、返す情報ページごとのオブジェクトの最大数を指定します。

    詳細については、Get-AD* コマンドレットの ResultPageSize および 
    ResultSetSize パラメーターの説明を参照してください。

  タイムアウトの動作
    次に、Active Directory モジュール内のタイムアウト状態と、タイムアウト状態
    対して実行できることについて説明します。

    どのような操作でも、Active Directory モジュールの既定のタイムアウトは 2 分
    です。

    検索操作の場合、Active Directory モジュールでは各ページ検索のタイムアウト
    を 2 分とするページング コントロールが使用されます。

    注: 検索には複数のサーバー ページ要求が必要になる場合があるため、合計検索
    時間が 2 分を超えることがあります。

    TimeoutException エラーは、タイムアウトが発生したことを示します。

    検索操作で TimeoutException エラーが発生する場合、ResultPageSize 
    パラメーターを設定して小さいページ サイズを使用するよう選択できます。

    これらの変更を行っても TimeoutException エラーが発生する場合は、この
    トピックの「フィルターの最適化」のガイドラインを使用して、フィルターを
    最適化してください。

  フィルターの最適化
    次のガイドラインを使用して、検索フィルターの動作を向上させることができ
    ます。

    Recursive パラメーターを使用しないでください。このパラメーターを使用すると、
    検索操作でのリソースの使用が増加します。

    ビット単位の AND 演算子とビット単位の OR 演算子を使用しないでください。
    詳細については、このトピックの「サポートされている演算子」を参照してくだ
    さい。

    論理 NOT 演算子を使用しないでください。

    条件の厳しい複数のクエリに、検索を分割します。

    注: フィルター構文と使用方法の詳細については、このトピックの
    「フィルター構文」を参照してください。

  フィルターの例
    ここでは、一般的なクエリでフィルターを使用するさまざまな例を示します。

    -------------------------- 例 1 --------------------------

    すべてのエントリを取得します。

        同等の LDAP フィルター
        (objectClass=*)

        Get-ADObject -Filter 'ObjectClass -like "*"'

    -------------------------- 例 2 --------------------------

    共通名に "bob" を含むエントリを取得します。

        同等の LDAP フィルター
        (cn=*bob*)

        Get-ADObject -Filter 'CN -like "*bob*"'

    -------------------------- 例 3 --------------------------

    間違ったパスワードの入力回数が 5 回以上のエントリを取得します。

        同等の LDAP フィルター
        (badpwdcount>=5)

        Get-ADUser -Filter 'badpwdcount -ge 5'

    -------------------------- 例 4 --------------------------

    電子メール属性があるユーザーをすべて取得します。

        同等の LDAP フィルター
        (&(objectClass=user)(email=*))

        Get-ADUser -filter 'email -like "*"'

        または

        Get-ADObject -filter 'email -like "*" -and ObjectClass -eq "user"'
        

    -------------------------- 例 5 --------------------------

    電子メール属性があり、姓が "smith" のユーザーをすべて取得します。

        同等の LDAP フィルター
        (&(sn=smith)(objectClass=user)(email=*))

        Get-ADUser -Filter 'Email -like "*" -and SurName -eq "smith"'

        または

        Get-ADUser -Filter 'Email -like "*" -and sn -eq "smith"'

    -------------------------- 例 6 --------------------------

    共通名が "andy" で始まるユーザー エントリすべてと、共通名が "steve" 
    または "margaret" のユーザーを取得します。

        同等の LDAP フィルター
        (&(objectClass=user) | (cn=andy*)(cn=steve)(cn=margaret))

        Get-ADUser -Filter 'CN -like "andy*" -or CN -eq "steve" -or
        CN -eq "margaret"'

    この 2 番目の PowerShell スクリプトの例では、さらに複雑なロジックを使用
    しており、丸かっこを使用して優先順位を制御する方法を示しています。

        Get-ADObject -Filter 'objectClass -eq "user" -and
         (CN -like "andy*" -or CN -eq "steve" -or CN -eq "margaret")'

    -------------------------- 例 7 --------------------------

    電子メール属性がないエントリをすべて取得します。

        同等の LDAP フィルター
        (!(email=*))

        Get-ADUser -Filter '-not Email -like "*"'

        または

        Get-ADUser -Filter 'Email -notlike "*"'

    -------------------------- 例 8 --------------------------

    2007 年 1 月 1 日からログオンしていないユーザーをすべて取得します。

        同等の LDAP フィルター
        (&(lastlogon<=X)(objectClass=user))
        // X は、1601 年 1 月 1 日からの 100 ナノ秒単位の数値です。

        $date = new-object System.DateTime -ArgumentList @(2007,1,1,0,0,0)
        
        Get-ADUser -Filter '-not LastLogon -le $date'

    -------------------------- 例 9 --------------------------

    過去 5 日以内にログオンしたユーザーをすべて取得します。

        同等の LDAP フィルター
        (&(lastLogon>=128812906535515110)
          (objectClass=user)(!(objectClass=computer)))

        $date = (get-date) - (new-timespan -days 5)
        Get-ADUser -Filter 'lastLogon -gt $date'

    -------------------------- 例 10 -------------------------

    次の例のクエリ文字列では、ADS_GROUP_TYPE_SECURITY_ENABLED フラグが設定
    されているグループ オブジェクトが検索されます。
    ADS_GROUP_TYPE_SECURITY_ENABLED (0x80000000 = 2147483648) の 10 進値は、
    比較対象値として使用される点に注意してください。

        同等の LDAP フィルター
        (&(objectCategory=group)(groupType:1.2.840.113556.1.4.803:=
        2147483648))

        Get-ADGroup -filter 'groupType -band 0x80000000'

    -------------------------- 例 11 --------------------------

    LDAP_MATCHING_RULE_IN_CHAIN は、あるオブジェクトの上位オブジェクトを検索
    するメソッドを提供するように設計されている、一致規則 OID です。
    Active Directory および AD LDS が使用されている多くのアプリケーションでは、
    通常、親子関係によって順序付けされている階層データが使用されます。これまで、
    アプリケーションでは推移性のグループ拡張を行ってグループ メンバーシップを
    把握しており、多くのネットワーク帯域幅を使用していました。チェーンの端まで
    リンクを照会する場合、オブジェクトが "チェーン内" に存在するかどうかを把握
    するためにアプリケーションではラウンド トリップを複数回行っていました。

    ユーザー "user1" がグループ "group1" のメンバーであるかどうかを確認するよう
    に設計されたクエリなどがその例です。

    注: user1 は、group1 の直接的なメンバーであるとは限りません。group1 のメン
    バーが他のグループのメンバーである場合があります。

    ベースを user DN (cn=user1, cn=users, dc=x) に設定し、ベースにする範囲を
    設定して、次のクエリを使用します。

        同等の LDAP フィルター
        (memberof:1.2.840.113556.1.4.1941:=(cn=Group1,OU=groupsOU,DC=x)))
        

        Get-ADUser -Filter 'memberOf -RecursiveMatch "CN=
        Administrators,
        CN=Builtin,DC=Fabrikam,DC=com"'
        -SearchBase "CN=Administrator,CN=Users,DC=Fabrikam,DC=com"

    ---------------------------------------------------------------

  フィルター構文
    次の構文の説明では、Filter パラメーターの PowerShell 記述言語をバッカ
    スナウア記法で示しています。

        <filter>  ::= "{" <FilterComponentList> "}"

        <FilterComponentList> ::= <FilterComponent> |
          <FilterComponent> <JoinOperator> <FilterComponent> |
          <NotOperator>  <FilterComponent>

        <FilterComponent> ::= <attr> <FilterOperator> <value> |
          "(" <FilterComponent> ")"

        <FilterOperator> ::= "-eq" | "-le" | "-ge" | "-ne" | "-lt" | "-gt"
        |
          "-approx" | "-bor" | "-band" | "-recursivematch" | "-like" |
          "-notlike"

        <JoinOperator> ::= "-and" | "-or"

        <NotOperator> ::= "-not"

        <attr> ::= <PropertyName> | <LDAPDisplayName of the attribute>

        <value>::= <この値は、指定されたフィルター演算子を使用して、属性 
        <ATTR> のオブジェクト データと比較されます>

    サポートされるプロパティ名とその型の一覧については、
    「get-help about_ActiveDirectory_ObjectModel」を参照してください。
    

  サポートされている演算子
    次の表は、頻繁に使用される検索フィルター演算子を示しています。

                                                    
    演算子説明LDAP で同等のもの
    --------------- ------------------------------ ---------------------
    
    -eq次の値と等しい。ワイルドカード検索はサポートされていません。=
    -ne次の値と等しくない。ワイルドカード検索はサポートされていません。!x = y
    -approxほぼ等しい~=
    -le辞書式順序で、次の値より小か等しい<=
    -lt辞書式順序で、次の値より小さい!x >= y
    -ge辞書式順序で、次の値より大か等しい>=
    -gt辞書式順序で、次の値より大きい!x <= y

    -andAND&
    -orOR|
    -notNOT!
    -borビット単位の OR:1.2.840.113556.1.4.804:=
    -bandビット単位の AND:1.2.840.113556.1.4.803:=
    -recursivematchLDAP_MATCHING_RULE_IN_CHAIN を使用します (注: このコント
    ロールは、Windows 2008 以降に対してのみ機能します)。
    :1.2.840.113556.1.4.1941:=    
    -like-eq に似ており、ワイルドカードによる比較がサポートされています。
    サポートされているワイルドカード文字は * のみです。=
    -notlike次の値に類似していない。ワイルドカードによる比較がサポートされて
    います。!x = y

    注: "?" など、"*" 以外の PowerShell ワイルドカードは、-Filter パラメーター
    構文でサポートされません。

  演算子の優先順位
    次の一覧は、フィルターの演算子の優先順位を高い順に示しています。

    優先順位が最も高いもの: -eq | -ge | -le | -approx | -band | -bor |
                          -recursivematch | -ne | -like
                        -not
                        -and
    優先順位が最も低いもの: -or

  特殊文字
    AD Filter の文字列データに特殊文字 (" " (二重引用符) や ' ' (単一引用符) 
    で囲んだデータ) を指定するには、次のエスケープ シーケンスを使用します。

    ASCII 文字代替のエスケープ シーケンス
    ------------------- ------------------------------------------------
    
    "                   `" (このエスケープ シーケンスは、文字列データを二重
    引用符で囲む場合にのみ必要です。)
    '                   '' (このエスケープ シーケンスは、文字列データを単一
    引用符で囲む場合にのみ必要です。)
    NUL\00 (これは、LDAP の標準エスケープ シーケンスです。)
    \                   \5c (これは、LDAP の標準エスケープ シーケンスです。)

  LDAP の特殊文字
    ADFilter パーサーは、文字列データ内で検出された次のすべての文字 (" " や 
    ' ' で囲んだデータ) を、相当する LDAP エスケープ シーケンスに自動的に
    変換します。エンドユーザーは、これらの LDAP エスケープ シーケンスについ
    て知っている必要はありません。

    ASCII 文字代替のエスケープ シーケンス
    ------------------- ------------------------------------------------
    
    *                    \2a (文字 * は、-eq および -ne 比較でのみ変換されま
      す。ワイルドカードによる比較には、-like および -notlike 演算子を使用し
      てください。)
    (                    \28
    )                    \29
    /                    \2f

  Active Directory モジュールのその他のサポート トピック
    フィルターの最適化の詳細については、MSDN ライブラリの「Creating More 
    Efficient Microsoft Active Directory-Enabled Applications (より効率的な 
    Microsoft Active Directory 対応アプリケーションの作成)」を参照してください。

    Active Directory モジュールのオブジェクトとその属性の詳細については、
    「about_ActiveDirectory_ObjectModel」を参照してください。
    

    Windows PowerShell 記述言語の構文の詳細については、「about_filter」を参照
    してください。

    注: PowerShell の「about_filter」トピックでは、記述言語のサポートに関する
    さまざまなトピックを扱っています。

関連項目
    about_ActiveDirectory
    about_ActiveDirectory_ObjectModel
    about_filter

